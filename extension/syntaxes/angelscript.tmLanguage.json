{
	"name": "angelscript",
	"scopeName": "source.angelscript",
    "patterns": [
        {
            "name": "keyword.declaration.angelscript",
            "match": "\\b(class|struct|delegate|event|import|enum|namespace)\\b"
        },
        {
            "name": "keyword.statement.angelscript",
            "match": "\\b(for|if|return|continue|break|default|else|while|case|switch)\\b"
        },
        {
            "name": "keyword.type.angelscript",
            "match": "\\b(void|auto|const|property|final|override|mixin)\\b"
        },
        {
            "name": "keyword.code.angelscript",
            "match": "\\b(nullptr|true|false|this|Cast|Super|NAME_None)\\b"
        },
        {
            "name": "keyword.access.angelscript",
            "match": "\\b(private|protected)\\b"
        },
        {
            "name": "storage.type.primitive.angelscript",
            "match": "\\b(int|float|double|bool|int32|int64|int16|int8|uint32|uint64|uint16|uint8)\\b"
        },
        {
			"match": "::",
			"name": "punctuation.separator.namespace.access.angelscript"
		},

        {
            "name": "meta.unrealmacro.property.angelsript",
            "begin": "^\\s*(UPROPERTY)\\(",
            "beginCaptures": {
                "1": {
                    "name": "variable.other.enummember"
                }
            },
            "end": "\\)\\s*$",
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "name": "keyword.specifier.angelscript",
                    "match": "\\b(EditAnywhere|EditDefaultsOnly|EditInstanceOnly|BlueprintReadWrite|BlueprintReadOnly|NotBlueprintVisible|NotEditable|DefaultComponent|RootComponent|Attach|AttachSocket|Transient|Interp|NoClear|NotVisible|EditConst|BlueprintHidden|ShowOnActor|Config|Replicated|NotReplicated|ReplicationCondition|EditFixedSize|AdvancedDisplay|Meta|Category)\\b\\s*"
                }
            ]
        },
        {
            "name": "meta.unrealmacro.function.angelsript",
            "begin": "^\\s*(UFUNCTION)\\(",
            "beginCaptures": {
                "1": {
                    "name": "variable.other.enummember"
                }
            },
            "end": "\\)\\s*$",
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "name": "keyword.specifier.angelscript",
                    "match": "\\b(BlueprintOverride|BlueprintEvent|BlueprintCallable|NotBlueprintCallable|BlueprintPure|NetFunction|CrumbFunction|DevFunction|Category|Meta|CallInEditor|Unreliable|NetMulticast|Client|Server|WithValidation|BlueprintAuthorityOnly)\\b\\s*"
                }
            ]
        },
        {
            "name": "meta.unrealmacro.class.angelsript",
            "begin": "^\\s*(UCLASS)\\(",
            "beginCaptures": {
                "1": {
                    "name": "variable.other.enummember"
                }
            },
            "end": "\\)\\s*$",
            "patterns": [
                {
                    "include": "#strings"
                },
                {
                    "name": "keyword.specifier.angelscript",
                    "match": "\\b(Abstract|Meta|Deprecated|Blueprintable|NotBlueprintable|NotPlaceable|Config|DefaultConfig|HideCategories|ComponentWrapperClass)\\b\\s*"
                }
            ]
        },

        {
            "name": "meta.preprocessor.angelsript",
            "begin": "^\\s*#",
            "end": "(?=\\n)"
        },

        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "comments": {
			"patterns": [
				{
					"name": "comment.block.angelscript",
					"begin": "(\\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.angelscript"
						}
					},
					"end": "(\\*\\/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.end.angelscript"
						}
					}
				},
				{
                    "name": "comment.line.double-slash.angelscript",
                    "begin": "(\\/\\/)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.angelscript"
                        }
                    },
                    "end": "(?=\\n)",
                    "patterns": [
                        {
                        }
                    ]
				}
			]
		},
        "numbers": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.angelscript"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.hexadecimal.angelscript"
										},
										"5": {
											"name": "constant.numeric.hexadecimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.hexadecimal.angelscript"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.hexadecimal.angelscript"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.hexadecimal.angelscript"
										},
										"11": {
											"name": "constant.numeric.exponent.hexadecimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.angelscript"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.c",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.decimal.point.angelscript"
										},
										"5": {
											"name": "constant.numeric.decimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.decimal.angelscript"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.decimal.angelscript"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.decimal.angelscript"
										},
										"11": {
											"name": "constant.numeric.exponent.decimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.angelscript"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.decimal.angelscript"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.decimal.angelscript"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.decimal.angelscript"
										},
										"8": {
											"name": "constant.numeric.exponent.decimal.angelscript",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.angelscript"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric"
								}
							]
						}
					]
				}
			}
		},
        "string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.angelscript"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.angelscript"
				}
			]
		},
        "line_continuation_character": {
            "patterns": [
                {
                    "match": "(\\\\)\\n",
                    "captures": {
                        "1": {
                            "name": "constant.character.escape.line-continuation.c"
                        }
                    }
                }
            ]
        },
        "strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.angelscript"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.angelscript"
						}
					},
					"name": "string.quoted.double.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.angelscript"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.angelscript"
						}
					},
					"name": "string.quoted.single.angelscript",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
        "operators": {
			"patterns": [
				{
					"match": "--",
					"name": "keyword.operator.decrement.angelscript"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.angelscript"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.angelscript"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.angelscript"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.angelscript"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.angelscript"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.angelscript"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.angelscript"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.angelscript"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.angelscript"
				},
				{
					"begin": "(\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.angelscript"
						}
					},
					"end": "(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.angelscript"
						}
					},
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		}
    }
}